{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name_",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol_",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "decimals_",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "maxSupply_",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "minter_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "stakerRewardPerBlock_",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "initDistrWallet_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "initMintAmount_",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "admin_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousPendingAdmin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newPendingAdmin",
						"type": "address"
					}
				],
				"name": "SetPendingAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "UpdateAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousMinter",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newMinter",
						"type": "address"
					}
				],
				"name": "UpdateMinter",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newStakerRewardPerBlock",
						"type": "uint256"
					}
				],
				"name": "UpdateStakerRewardPerBlock",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mintStakerReward",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "previousAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "previousMinter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "previousPendingAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin_",
						"type": "address"
					}
				],
				"name": "setPendingAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakerRewardPerBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "updateAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "minter_",
						"type": "address"
					}
				],
				"name": "updateMinter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "stakerRewardPerBlock_",
						"type": "uint256"
					}
				],
				"name": "updateStakerRewardPerBlock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This token is the Governance token of Replay subchain on Theta Blockchain",
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"SetPendingAdmin(address,address)": {
					"details": "Event emitted when setPendingAdmin is updated by admin.",
					"params": {
						"newPendingAdmin": "- the current pendingAdmin value that was added by admin",
						"previousPendingAdmin": "- the previous pendingAdmin value that was updated by admin"
					}
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				},
				"UpdateAdmin(address,address)": {
					"details": "Event emitted when admin is updated - only pending admin can update.",
					"params": {
						"newAdmin": "- the current admin value - this is usually the pendingAdmin value and only called by pendingAdmin to perform this function",
						"previousAdmin": "- the previous admin value that was updated by pendingAdmin"
					}
				},
				"UpdateMinter(address,address)": {
					"details": "Event emitted when minted address is updated.",
					"params": {
						"newMinter": "- the address of current minter",
						"previousMinter": "- the address of previous minter"
					}
				},
				"UpdateStakerRewardPerBlock(uint256)": {
					"details": "Event emitted when _stakerRewardPerBlock is updated by admin.",
					"params": {
						"newStakerRewardPerBlock": "- this is the new _stakerRewardPerBlock value updated by admin."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"constructor": {
					"details": "Initializes the contract during deployment",
					"params": {
						"admin_": "is the admin of the contract",
						"decimals_": "set to 18 on deploy.",
						"initDistrWallet_": "will hold the initial minted tokens",
						"initMintAmount_": "the initial mint tokens that will be held by initDistrWallet_",
						"maxSupply_": "is set to maxSupply of tokens allowed. The total supply of tokens should never exceed more than 1 billion",
						"minter_": "is the contract address of ValidatorStakeManager.",
						"name_": "is the name of the token",
						"stakerRewardPerBlock_": "will mint tokens based on stakerRewardPerBlock_ to reward the Subchain validator stakers.",
						"symbol_": "is the ticker symbol of the token"
					}
				},
				"decimals()": {
					"details": "Read only function for returning the decimals of token."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"mint(uint256)": {
					"details": "This function allows admin to mint additional tokens.",
					"params": {
						"amount": "- amount of tokens that will be minted by admin. They are minted to admin wallet."
					}
				},
				"mintStakerReward(address,uint256)": {
					"details": "This method allows the minter (e.g. the ValidatorStakeManager contract) to mint new tokens to reward, Minter is the ValidatorStakeManager contract.",
					"params": {
						"account": "- account to which the staker amount and rewards will be minted",
						"amount": "- amount that needs to be minted by the VSM"
					},
					"returns": {
						"_0": "bool - This returns true - if the rewards are minted and false if they are not."
					}
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"setPendingAdmin(address)": {
					"details": "Pending admin is an intermediate role which is only used to update an admin",
					"params": {
						"admin_": "the address of the pending admin that needs to be set"
					}
				},
				"stakerRewardPerBlock()": {
					"details": "This method tells the minter - ValidatorStakeManager contract how many new tokens are minted per block for the Subchain validator stakers",
					"returns": {
						"_0": "Returns reward per block that gets minted by minter for stakers based on their staked amount."
					}
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
				},
				"updateAdmin()": {
					"details": "This function updates admin - only invoked by pending admin"
				},
				"updateMinter(address)": {
					"details": "This function updates Minter and can be called by admin only.",
					"params": {
						"minter_": "- The address of the minted contract this will be VSM - Validator Stake manager."
					}
				},
				"updateStakerRewardPerBlock(uint256)": {
					"details": "This function allows admin to update Staker reward per block",
					"params": {
						"stakerRewardPerBlock_": "- Minter will mint tokens based on stakerRewardPerBlock_ to reward the Subchain validator stakers."
					}
				}
			},
			"stateVariables": {
				"_decimals": {
					"details": "represents the decimal value of the token. Once set in constructor cannot be changes. Its set to 18"
				},
				"_stakerRewardPerBlock": {
					"details": "Rewards earned by staker per block based on staked amount"
				},
				"admin": {
					"details": "Admin of the contract - can mint tokens, change pendingAdmin and _stakerRewardPerBlock"
				},
				"maxSupply": {
					"details": "Max supply of the token"
				},
				"minter": {
					"details": "Minter is the one who mints tokens per each block based on _stakerRewardPerBlock"
				},
				"pendingAdmin": {
					"details": "Pending admin can update the admin"
				},
				"previousAdmin": {
					"details": "Previous Admin emitted when replaced by new pending admin"
				},
				"previousMinter": {
					"details": "Previous Minter emitted when replaced by new minter address"
				},
				"previousPendingAdmin": {
					"details": "Previous Pending Admin emitted when replaced by new admin"
				}
			},
			"title": "ReplayToken",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"updateStakerRewardPerBlock(uint256)": {
					"notice": "This value will be cut in half based on the rules in per white paper."
				}
			},
			"notice": "TNT20 token for Replay subchain on theta network blockchain",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ReplayToken.sol": "ReplayToken"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
				"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
			"license": "MIT",
			"urls": [
				"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
				"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b",
				"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ"
			]
		},
		"contracts/ReplayToken.sol": {
			"keccak256": "0xa2e2cf28bf05eab6106fce7b7646be1ce9c6b3af6357383d7e57d229dbd751a7",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8bd5933b03c8480f1b9eaaac93c7baf05dac9680a3f7c50ed4aefcce432fdd13",
				"dweb:/ipfs/QmY4uMP1utmUrywHg9DU7dJG84FGZbhp9WaGm8SFkadfF6"
			]
		}
	},
	"version": 1
}